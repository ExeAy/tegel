/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the event-listener-types-output-target output
 * target. It contains additional typing information for all components that exist
 * in this project and their event listener types.
 */

import {
  TdsAccordionItemCustomEvent,
  TdsBannerCustomEvent,
  TdsCardCustomEvent,
  TdsCheckboxCustomEvent,
  TdsChipCustomEvent,
  TdsDatetimeCustomEvent,
  TdsDropdownCustomEvent,
  TdsDropdownOptionCustomEvent,
  TdsFolderTabsCustomEvent,
  TdsHeaderCellCustomEvent,
  TdsInlineTabsCustomEvent,
  TdsModalCustomEvent,
  TdsNavigationTabsCustomEvent,
  TdsPopoverCoreCustomEvent,
  TdsRadioButtonCustomEvent,
  TdsSideMenuCustomEvent,
  TdsSideMenuCollapseButtonCustomEvent,
  CollapseEvent,
  TdsSliderCustomEvent,
  TdsStepperCustomEvent,
  TdsTableCustomEvent,
  TdsTableBodyRowCustomEvent,
  TdsTableBodyRowExpandableCustomEvent,
  TdsTableFooterCustomEvent,
  TdsTableHeaderCustomEvent,
  TdsTableToolbarCustomEvent,
  TdsTextFieldCustomEvent,
  TdsTextareaCustomEvent,
  TdsToastCustomEvent,
  TdsToggleCustomEvent,
  InternalTdsStepperPropChange,
  InternalTdsTablePropChange,
  InternalTdsSideMenuPropChange,
} from './components';

export interface HTMLTdsAccordionItemElementEventMap {
  tdsToggle: {
    expanded: boolean;
  };
}

export interface HTMLTdsBannerElementEventMap {
  tdsClose: {
    bannerId: string;
  };
}

export interface HTMLTdsCardElementEventMap {
  tdsClick: {
    cardId: string;
  };
}

export interface HTMLTdsCheckboxElementEventMap {
  tdsChange: {
    checkboxId: string;
    checked: boolean;
    indeterminate: boolean;
    value?: string;
  };
  tdsFocus: FocusEvent;
  tdsBlur: FocusEvent;
}

export interface HTMLTdsChipElementEventMap {
  tdsChange: {
    chipId: string;
    value: string;
    checked?: boolean;
  };
  tdsClick: {
    chipId: string;
  };
}

export interface HTMLTdsDatetimeElementEventMap {
  tdsChange: any;
  tdsBlur: FocusEvent;
  tdsFocus: FocusEvent;
}

export interface HTMLTdsDropdownElementEventMap {
  tdsChange: {
    name: string;
    value: string;
  };
  tdsFocus: FocusEvent;
  tdsBlur: FocusEvent;
  tdsInput: InputEvent;
}

export interface HTMLTdsDropdownOptionElementEventMap {
  tdsSelect: {
    selected: boolean;
    value: string;
  };
  tdsFocus: FocusEvent;
  tdsBlur: FocusEvent;
}

export interface HTMLTdsFolderTabsElementEventMap {
  tdsChange: {
    selectedTabIndex: number;
  };
}

export interface HTMLTdsHeaderCellElementEventMap {
  tdsSort: {
    tableId: string;
    columnKey: string;
    sortingDirection: 'asc' | 'desc';
  };
  internalSortButtonClicked: {
    tableId: string;
    key: string;
  };
  internalTdsTextAlign: any;
  internalTdsHover: {
    tableId: string;
    key: string;
  };
}

export interface HTMLTdsInlineTabsElementEventMap {
  tdsChange: {
    selectedTabIndex: number;
  };
}

export interface HTMLTdsModalElementEventMap {
  tdsClose: any;
}

export interface HTMLTdsNavigationTabsElementEventMap {
  tdsChange: {
    selectedTabIndex: number;
  };
}

export interface HTMLTdsPopoverCoreElementEventMap {
  internalTdsShow: {};
  internalTdsClose: {};
}

export interface HTMLTdsRadioButtonElementEventMap {
  tdsChange: {
    radioId: string;
    value: string;
  };
}

export interface HTMLTdsSideMenuElementEventMap {
  tdsCollapse: CollapseEvent;
  internalTdsCollapse: CollapseEvent;
  internalTdsSideMenuPropChange: InternalTdsSideMenuPropChange;
}

export interface HTMLTdsSideMenuCollapseButtonElementEventMap {
  tdsCollapse: CollapseEvent;
  internalTdsCollapse: CollapseEvent;
}

export interface HTMLTdsSliderElementEventMap {
  tdsChange: {
    value: string;
  };
}

export interface HTMLTdsStepperElementEventMap {
  internalTdsPropsChange: InternalTdsStepperPropChange;
}

export interface HTMLTdsTableElementEventMap {
  internalTdsTablePropChange: InternalTdsTablePropChange;
}

export interface HTMLTdsTableBodyRowElementEventMap {
  tdsSelect: {
    tableId: string;
    checked: boolean;
    selectedRows: any[];
  };
}

export interface HTMLTdsTableBodyRowExpandableElementEventMap {
  internalTdsRowExpanded: any;
}

export interface HTMLTdsTableFooterElementEventMap {
  tdsPagination: {
    tableId: string;
    paginationValue: number;
  };
}

export interface HTMLTdsTableHeaderElementEventMap {
  tdsSelectAll: {
    tableId: string;
    checked: boolean;
    selectedRows: any[];
  };
}

export interface HTMLTdsTableToolbarElementEventMap {
  tdsFilter: {
    tableId: string;
    query: string;
  };
}

export interface HTMLTdsTextFieldElementEventMap {
  tdsChange: any;
  tdsInput: InputEvent;
  tdsFocus: FocusEvent;
  tdsBlur: FocusEvent;
}

export interface HTMLTdsTextareaElementEventMap {
  tdsChange: any;
  tdsBlur: FocusEvent;
  tdsInput: InputEvent;
  tdsFocus: FocusEvent;
}

export interface HTMLTdsToastElementEventMap {
  tdsClose: {
    toastId: string;
  };
}

export interface HTMLTdsToggleElementEventMap {
  tdsToggle: {
    toggleId: string;
    checked: boolean;
  };
}

declare global {
  interface HTMLTdsAccordionItemElement {
    addEventListener<K extends keyof HTMLTdsAccordionItemElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsAccordionItemElement,
        ev: TdsAccordionItemCustomEvent<HTMLTdsAccordionItemElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsAccordionItemElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsAccordionItemElement,
        ev: TdsAccordionItemCustomEvent<HTMLTdsAccordionItemElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsBannerElement {
    addEventListener<K extends keyof HTMLTdsBannerElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsBannerElement,
        ev: TdsBannerCustomEvent<HTMLTdsBannerElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsBannerElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsBannerElement,
        ev: TdsBannerCustomEvent<HTMLTdsBannerElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsCardElement {
    addEventListener<K extends keyof HTMLTdsCardElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsCardElement,
        ev: TdsCardCustomEvent<HTMLTdsCardElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsCardElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsCardElement,
        ev: TdsCardCustomEvent<HTMLTdsCardElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsCheckboxElement {
    addEventListener<K extends keyof HTMLTdsCheckboxElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsCheckboxElement,
        ev: TdsCheckboxCustomEvent<HTMLTdsCheckboxElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsCheckboxElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsCheckboxElement,
        ev: TdsCheckboxCustomEvent<HTMLTdsCheckboxElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsChipElement {
    addEventListener<K extends keyof HTMLTdsChipElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsChipElement,
        ev: TdsChipCustomEvent<HTMLTdsChipElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsChipElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsChipElement,
        ev: TdsChipCustomEvent<HTMLTdsChipElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsDatetimeElement {
    addEventListener<K extends keyof HTMLTdsDatetimeElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsDatetimeElement,
        ev: TdsDatetimeCustomEvent<HTMLTdsDatetimeElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsDatetimeElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsDatetimeElement,
        ev: TdsDatetimeCustomEvent<HTMLTdsDatetimeElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsDropdownElement {
    addEventListener<K extends keyof HTMLTdsDropdownElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsDropdownElement,
        ev: TdsDropdownCustomEvent<HTMLTdsDropdownElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsDropdownElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsDropdownElement,
        ev: TdsDropdownCustomEvent<HTMLTdsDropdownElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsDropdownOptionElement {
    addEventListener<K extends keyof HTMLTdsDropdownOptionElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsDropdownOptionElement,
        ev: TdsDropdownOptionCustomEvent<HTMLTdsDropdownOptionElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsDropdownOptionElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsDropdownOptionElement,
        ev: TdsDropdownOptionCustomEvent<HTMLTdsDropdownOptionElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsFolderTabsElement {
    addEventListener<K extends keyof HTMLTdsFolderTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsFolderTabsElement,
        ev: TdsFolderTabsCustomEvent<HTMLTdsFolderTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsFolderTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsFolderTabsElement,
        ev: TdsFolderTabsCustomEvent<HTMLTdsFolderTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsHeaderCellElement {
    addEventListener<K extends keyof HTMLTdsHeaderCellElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsHeaderCellElement,
        ev: TdsHeaderCellCustomEvent<HTMLTdsHeaderCellElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsHeaderCellElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsHeaderCellElement,
        ev: TdsHeaderCellCustomEvent<HTMLTdsHeaderCellElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsInlineTabsElement {
    addEventListener<K extends keyof HTMLTdsInlineTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsInlineTabsElement,
        ev: TdsInlineTabsCustomEvent<HTMLTdsInlineTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsInlineTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsInlineTabsElement,
        ev: TdsInlineTabsCustomEvent<HTMLTdsInlineTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsModalElement {
    addEventListener<K extends keyof HTMLTdsModalElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsModalElement,
        ev: TdsModalCustomEvent<HTMLTdsModalElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsModalElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsModalElement,
        ev: TdsModalCustomEvent<HTMLTdsModalElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsNavigationTabsElement {
    addEventListener<K extends keyof HTMLTdsNavigationTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsNavigationTabsElement,
        ev: TdsNavigationTabsCustomEvent<HTMLTdsNavigationTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsNavigationTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsNavigationTabsElement,
        ev: TdsNavigationTabsCustomEvent<HTMLTdsNavigationTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsPopoverCoreElement {
    addEventListener<K extends keyof HTMLTdsPopoverCoreElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsPopoverCoreElement,
        ev: TdsPopoverCoreCustomEvent<HTMLTdsPopoverCoreElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsPopoverCoreElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsPopoverCoreElement,
        ev: TdsPopoverCoreCustomEvent<HTMLTdsPopoverCoreElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsRadioButtonElement {
    addEventListener<K extends keyof HTMLTdsRadioButtonElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsRadioButtonElement,
        ev: TdsRadioButtonCustomEvent<HTMLTdsRadioButtonElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsRadioButtonElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsRadioButtonElement,
        ev: TdsRadioButtonCustomEvent<HTMLTdsRadioButtonElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsSideMenuElement {
    addEventListener<K extends keyof HTMLTdsSideMenuElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsSideMenuElement,
        ev: TdsSideMenuCustomEvent<HTMLTdsSideMenuElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsSideMenuElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsSideMenuElement,
        ev: TdsSideMenuCustomEvent<HTMLTdsSideMenuElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsSideMenuCollapseButtonElement {
    addEventListener<K extends keyof HTMLTdsSideMenuCollapseButtonElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsSideMenuCollapseButtonElement,
        ev: TdsSideMenuCollapseButtonCustomEvent<HTMLTdsSideMenuCollapseButtonElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsSideMenuCollapseButtonElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsSideMenuCollapseButtonElement,
        ev: TdsSideMenuCollapseButtonCustomEvent<HTMLTdsSideMenuCollapseButtonElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsSliderElement {
    addEventListener<K extends keyof HTMLTdsSliderElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsSliderElement,
        ev: TdsSliderCustomEvent<HTMLTdsSliderElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsSliderElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsSliderElement,
        ev: TdsSliderCustomEvent<HTMLTdsSliderElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsStepperElement {
    addEventListener<K extends keyof HTMLTdsStepperElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsStepperElement,
        ev: TdsStepperCustomEvent<HTMLTdsStepperElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsStepperElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsStepperElement,
        ev: TdsStepperCustomEvent<HTMLTdsStepperElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsTableElement {
    addEventListener<K extends keyof HTMLTdsTableElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableElement,
        ev: TdsTableCustomEvent<HTMLTdsTableElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsTableElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableElement,
        ev: TdsTableCustomEvent<HTMLTdsTableElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsTableBodyRowElement {
    addEventListener<K extends keyof HTMLTdsTableBodyRowElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableBodyRowElement,
        ev: TdsTableBodyRowCustomEvent<HTMLTdsTableBodyRowElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsTableBodyRowElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableBodyRowElement,
        ev: TdsTableBodyRowCustomEvent<HTMLTdsTableBodyRowElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsTableBodyRowExpandableElement {
    addEventListener<K extends keyof HTMLTdsTableBodyRowExpandableElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableBodyRowExpandableElement,
        ev: TdsTableBodyRowExpandableCustomEvent<HTMLTdsTableBodyRowExpandableElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsTableBodyRowExpandableElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableBodyRowExpandableElement,
        ev: TdsTableBodyRowExpandableCustomEvent<HTMLTdsTableBodyRowExpandableElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsTableFooterElement {
    addEventListener<K extends keyof HTMLTdsTableFooterElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableFooterElement,
        ev: TdsTableFooterCustomEvent<HTMLTdsTableFooterElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsTableFooterElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableFooterElement,
        ev: TdsTableFooterCustomEvent<HTMLTdsTableFooterElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsTableHeaderElement {
    addEventListener<K extends keyof HTMLTdsTableHeaderElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableHeaderElement,
        ev: TdsTableHeaderCustomEvent<HTMLTdsTableHeaderElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsTableHeaderElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableHeaderElement,
        ev: TdsTableHeaderCustomEvent<HTMLTdsTableHeaderElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsTableToolbarElement {
    addEventListener<K extends keyof HTMLTdsTableToolbarElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableToolbarElement,
        ev: TdsTableToolbarCustomEvent<HTMLTdsTableToolbarElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsTableToolbarElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTableToolbarElement,
        ev: TdsTableToolbarCustomEvent<HTMLTdsTableToolbarElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsTextFieldElement {
    addEventListener<K extends keyof HTMLTdsTextFieldElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTextFieldElement,
        ev: TdsTextFieldCustomEvent<HTMLTdsTextFieldElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsTextFieldElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTextFieldElement,
        ev: TdsTextFieldCustomEvent<HTMLTdsTextFieldElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsTextareaElement {
    addEventListener<K extends keyof HTMLTdsTextareaElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTextareaElement,
        ev: TdsTextareaCustomEvent<HTMLTdsTextareaElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsTextareaElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsTextareaElement,
        ev: TdsTextareaCustomEvent<HTMLTdsTextareaElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsToastElement {
    addEventListener<K extends keyof HTMLTdsToastElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsToastElement,
        ev: TdsToastCustomEvent<HTMLTdsToastElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsToastElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsToastElement,
        ev: TdsToastCustomEvent<HTMLTdsToastElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLTdsToggleElement {
    addEventListener<K extends keyof HTMLTdsToggleElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsToggleElement,
        ev: TdsToggleCustomEvent<HTMLTdsToggleElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLTdsToggleElementEventMap>(
      type: K,
      listener: (
        this: HTMLTdsToggleElement,
        ev: TdsToggleCustomEvent<HTMLTdsToggleElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }

  interface HTMLElementTagNameMap {
    'tds-accordion-item': HTMLTdsAccordionItemElement;
    'tds-banner': HTMLTdsBannerElement;
    'tds-card': HTMLTdsCardElement;
    'tds-checkbox': HTMLTdsCheckboxElement;
    'tds-chip': HTMLTdsChipElement;
    'tds-datetime': HTMLTdsDatetimeElement;
    'tds-dropdown': HTMLTdsDropdownElement;
    'tds-dropdown-option': HTMLTdsDropdownOptionElement;
    'tds-folder-tabs': HTMLTdsFolderTabsElement;
    'tds-header-cell': HTMLTdsHeaderCellElement;
    'tds-inline-tabs': HTMLTdsInlineTabsElement;
    'tds-modal': HTMLTdsModalElement;
    'tds-navigation-tabs': HTMLTdsNavigationTabsElement;
    'tds-popover-core': HTMLTdsPopoverCoreElement;
    'tds-radio-button': HTMLTdsRadioButtonElement;
    'tds-side-menu': HTMLTdsSideMenuElement;
    'tds-side-menu-collapse-button': HTMLTdsSideMenuCollapseButtonElement;
    'tds-slider': HTMLTdsSliderElement;
    'tds-stepper': HTMLTdsStepperElement;
    'tds-table': HTMLTdsTableElement;
    'tds-table-body-row': HTMLTdsTableBodyRowElement;
    'tds-table-body-row-expandable': HTMLTdsTableBodyRowExpandableElement;
    'tds-table-footer': HTMLTdsTableFooterElement;
    'tds-table-header': HTMLTdsTableHeaderElement;
    'tds-table-toolbar': HTMLTdsTableToolbarElement;
    'tds-text-field': HTMLTdsTextFieldElement;
    'tds-textarea': HTMLTdsTextareaElement;
    'tds-toast': HTMLTdsToastElement;
    'tds-toggle': HTMLTdsToggleElement;
  }
}
